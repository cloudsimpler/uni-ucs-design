import { getDeepProperty } from "./deep.uts";

/**
 * JSON 数据合并
 * @param {UTSJSONObject} p1 json数据
 * @param {UTSJSONObject} p2 json数据
 * @return {UTSJSONObject} p1,p2合并后的新json数据
 */
export const getJsonMerge = (p1 : UTSJSONObject, p2 : UTSJSONObject) : UTSJSONObject => {
	// #ifdef UNI-APP-X
	return UTSJSONObject.assign(p1, p2);
	// #endif
	// #ifndef UNI-APP-X
	return Object.assign(p1, p2);
	// #endif
};

/**
 * Array 数据合并去重
 * @param {UTSJSONObject} p1 array数据
 * @param {UTSJSONObject} p2 array数据
 * @return {UTSJSONObject} p1,p2合并去重后的新array数据
 */
export const getArrayMerge = (p1 : UTSJSONObject[], p2 : UTSJSONObject[]) : UTSJSONObject[] => {
	const mergedArray = p1.concat(p2);
	const stringifiedArray = mergedArray.map(obj => JSON.stringify(obj));
	const uniqueStringSet = new Set(stringifiedArray);
	const uniqueArray = Array.from(uniqueStringSet).map(str => JSON.parse(str as string) as any);
	return uniqueArray as UTSJSONObject[];
};

/**
 * 选取所需参数
 * @param {Array} a 数组数据
 * @param {string}  
 */
export const getfilterData = (dataArray : Array<UTSJSONObject>, fieldsToKeep : Array<string>) => {
	return dataArray.map(item => {
		const filteredItem = {};
		fieldsToKeep.forEach(field => {
			if (item.hasOwnProperty(field)) {
				filteredItem[field] = item[field];
			}
			// 可选：处理字段不存在的情况
			// else {
			//   console.warn(`字段 "${field}" 不存在于对象中`);
			// }
		});
		return filteredItem;
	});
}