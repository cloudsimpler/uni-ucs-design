/**
 * 深度属性
 * @param {object} data 数据
 * @param {string} path 路径
 * @returns 数据路径下的属性
 */
export const getDeepProperty = (data : any, path : string) : any | null => {
	if (typeof data !== 'object') return null;
	let current : any = data;
	const segments = path.split('.');
	for (let segment of segments) {
		if (segment.endsWith(']') && segment.includes('[')) {
			const bracketIndex = segment.indexOf('[')
			const key = segment.substring(0, bracketIndex)
			const indexStr = segment.substring(bracketIndex + 1, segment.length - 1)

			current = (current as UTSJSONObject)[key] as any;
			if (!Array.isArray(current)) return null

			const index = parseInt(indexStr)
			if (isNaN(index) || index < 0 || index >= current.length) return null

			current = current[index]
		} else {
			if (typeof current !== 'object' || Array.isArray(current)) return null
			current = (current as UTSJSONObject)[segment] as any
		}
	};
	return current;
};
/**
 * 深度拷贝
 * @param {UTSJSONObject} obj 需要拷贝数据
 * @return {UTSJSONObject} 深度拷贝数据
 */
export const getDeepCopy = (obj : UTSJSONObject) : UTSJSONObject => {
	return JSON.parse(JSON.stringify(obj)) as UTSJSONObject
};

/**
 * 深度合并
 * @param {UTSJSONObject} obj1 原数据
 * @param {UTSJSONObject} obj2 合并数据
 * @returns obj1和obj2合并后的数据
 */
export let getDeepMerge : ((obj1 : UTSJSONObject, obj2 : UTSJSONObject) => UTSJSONObject) | null = null;

getDeepMerge = (obj1 : UTSJSONObject, obj2 : UTSJSONObject) : UTSJSONObject => {
	// 深度拷贝
	let first = getDeepCopy(obj1);
	let second = getDeepCopy(obj2);

	for (let f in second) {
		if (first.hasOwnProperty(f)) {
			if (typeof first[f] === 'object' && !Array.isArray(first[f]) && typeof second[f] === 'object' && !Array.isArray(second[f])) {
				first[f] = getDeepMerge?.(first[f] as UTSJSONObject, second[f] as UTSJSONObject);
			} else {
				if (typeof first[f] === typeof second[f] && second[f] != null) {
					first[f] = second[f];
				};
			}
		} else {
			first[f] = second[f];
		};
	};
	
	return first as UTSJSONObject;
};