import { defaultColors, darkGrey, lightGrey } from "./utssdk/defaultColors.uts";
import { defaultConfig } from "./utssdk/defaultConfig.uts";
import { generateObject, generateIndex } from "../ucs-color";
import { getDeepProperty, processMerging } from "./common/tools.uts";

/**
 * 定义配置
 * @param config 配置object
 * @returns UTSJSONObject
 */
export const defineConfig = (config : UTSJSONObject) => {
	// 合并配置
	processMerging(defaultConfig, config);
	// 初始化配置色彩
	const osColor = defaultConfig.osColor;
	const osTheme = defaultConfig.osTheme;
	for (let c in osColor) {
		const colorJson = generateObject(osColor[c] as string, c, osTheme);
		for (let i in colorJson) { defaultColors[i] = colorJson[i]; };
	};
	if (osTheme !== "dark") {
		for (let i in lightGrey) { defaultColors[i] = lightGrey[i]; };
	} else {
		for (let i in darkGrey) { defaultColors[i] = darkGrey[i]; };
	};
};

/**
 * 切换深色主题模式
 * @param osTheme [light,dark] 模式主题
 */
export const setOsTheme = (osTheme : string) => {
	defaultConfig.osTheme = osTheme;
	const osColor = defaultConfig.osColor;
	for (let c in osColor) {
		const colorJson = generateObject(osColor[c] as string, c, osTheme);
		for (let i in colorJson) { defaultColors[i] = colorJson[i]; };
	};
	if (osTheme !== "dark") {
		for (let i in lightGrey) { defaultColors[i] = lightGrey[i]; };
	} else {
		for (let i in darkGrey) { defaultColors[i] = darkGrey[i]; };
	};
};

/**
 * 获取颜色值
 * @param str 颜色值，可以是primary、success、warning、danger配置定义颜色，也可以是hex值
 * @returns string
 */
export const getOsColor = (str : string) : string => {
	return defaultColors.hasOwnProperty(str) ? defaultColors[str] as string : str;
};

/**
 * 获取文本色
 * @param color ucs色彩变量或者hex颜色值
 * @returns UTSJSONObject
 */
export const getOsTextColor = (color : string) : UTSJSONObject => {
	return { color: getOsColor(color) };
};

/**
 * 获取背景色
 * @param color ucs色彩变量或者hex颜色值
 * @returns UTSJSONObject
 */
export const getOsBackground = (color : string) : UTSJSONObject => {
	return { backgroundColor: getOsColor(color) };
};

/**
 * 获取渐变色
 * @param direction 渐变方向
 * @param colorStart 渐变起始点颜色值
 * @param colorStop 渐变终点颜色值
 * @returns UTSJSONObject
 */
export const getOsGradient = (direction : string, colorStart : string, colorStop : string) : UTSJSONObject => {
	return { backgroundImage: `linear-gradient(${direction},${getOsColor(colorStart)},${getOsColor(colorStop)})` };
};

/**
 * 获取边框色
 * @param direction 方向，all、top、bottom、left、right
 * @param width 边框宽度
 * @param style 边框样式
 * @param color ucs色彩变量或者hex颜色值
 * @returns UTSJSONObject
 */
export const getOsBorder = (direction : string, width : string, style : string, color : string) : UTSJSONObject => {
	if (direction == 'top') {
		return { borderTop: `${width} ${style} ${getOsColor(color)}` };
	} else if (direction == 'bottom') {
		return { borderBottom: `${width} ${style} ${getOsColor(color)}` };
	} else if (direction == 'left') {
		return { borderLeft: `${width} ${style} ${getOsColor(color)}` };
	} else if (direction == 'right') {
		return { borderRight: `${width} ${style} ${getOsColor(color)}` };
	} else {
		return { border: `${width} ${style} ${getOsColor(color)}` };
	}
};

/**
 * 动态设置主题颜色
 * @param color hex颜色值
 */
export const setOsColorPrimary = (color : string) => {
	defaultConfig.osColor['primary'] = color;
	const colorJson = generateObject(color, "primary", defaultConfig.osTheme);
	for (let i in colorJson) { defaultColors[i] = colorJson[i]; };
};

/**
 * 设置国际化语言
 * @param osLanguage [zh-Hans,zh-Hant,en] 语言
 */
export const setOsLanguage = (language : string) => {
	defaultConfig.osLanguage = language;
};

/**
 * 获取UCS Design 框架语言
 * @param path 参数路径
 * @returns any
 */
export const getUcsDesignLanguage = (path : string, defaultValue : string) : any => {
	if (defaultValue == "") {
		return getDeepProperty(defaultConfig.osUcsLanguage as any, `${defaultConfig.osLanguage}.${path}`)
	} else {
		return defaultValue
	}
};

/**
 * 根据浅色和深色模式下获取不同颜色
 * @param lightColor 浅色模式颜色
 * @param darkColor 深色模式颜色
 * @returns string 颜色值
 */
export const getLightDarkColor = (lightColor : string, darkColor : string) : string => {
	return defaultConfig.osTheme == "dark" ? darkColor : lightColor
};

/**
 * 根据浅色和深色模式下获取不同颜色
 * @param color hex颜色值
 * @param index 生成颜色值的等级
 * @returns string 颜色值
 */
export const getGenerateIndex = (color : string, index : number) : string => {
	return generateIndex(color, index, defaultConfig.osTheme)
};