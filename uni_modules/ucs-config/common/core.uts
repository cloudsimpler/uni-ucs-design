import { defaultConfigType } from "../utssdk/interface.uts";
import { defaultConfig } from "../utssdk/defaultConfig.uts";
import { defaultColors, darkGrey, lightGrey } from "../utssdk/defaultColors.uts";
// @ts-ignore
import { generateObject } from "@/uni_modules/ucs-color";

// 声明函数
let deepMergeObject : ((first : UTSJSONObject, second : UTSJSONObject) => UTSJSONObject) | null = null;
/**
 * object深度合并
 * @param first 原始object数据
 * @param second 需要被合并的object数据
 * @returns object
 */
deepMergeObject = (first : UTSJSONObject, second : UTSJSONObject) : UTSJSONObject => {
	for (let f in second) {
		if (first.hasOwnProperty(f)) {
			if (typeof first[f] === 'object' && !Array.isArray(first[f]) && typeof second[f] === 'object' && !Array.isArray(second[f])) {
				first[f] = deepMergeObject?.(first[f] as UTSJSONObject, second[f] as UTSJSONObject);
			} else {
				if (typeof first[f] === typeof second[f] && second[f] != null) {
					first[f] = second[f];
				};
			}
		} else {
			first[f] = second[f];
		};
	};
	return first as UTSJSONObject;
};
/**
 * 数据合并
 * @param rawData 原始object数据
 * @param combinedData 需要被合并的object数据
 * @returns object
 */
const processMerging = (rawData : defaultConfigType, combinedData : UTSJSONObject) => {
	for (let f in rawData) {
		if (combinedData.hasOwnProperty(f)) {
			if (typeof rawData[f] === 'object' && !Array.isArray(rawData[f]) && typeof combinedData[f] === 'object' && !Array.isArray(combinedData[f])) {
				rawData[f] = deepMergeObject?.(rawData[f] as UTSJSONObject, combinedData[f] as UTSJSONObject);
			} else {
				if (typeof rawData[f] === typeof combinedData[f] && combinedData[f] != null) {
					rawData[f] = combinedData[f];
				};
			}
		};
	};
};

/**
 * 定义配置
 * @param config 配置object
 * @returns UTSJSONObject
 */
export const defineConfig = (config : UTSJSONObject) => {
	// 合并配置
	processMerging(defaultConfig, config);
	// 初始化配置色彩
	const osColor = defaultConfig.osColor;
	const osTheme = defaultConfig.osTheme;
	for (let c in osColor) {
		const colorJson = generateObject(osColor[c] as string, c, osTheme);
		for (let i in colorJson) { defaultColors[i] = colorJson[i]; };
	};
	if (osTheme !== "dark") {
		for (let i in lightGrey) { defaultColors[i] = lightGrey[i]; };
	} else {
		for (let i in darkGrey) { defaultColors[i] = darkGrey[i]; };
	};
};