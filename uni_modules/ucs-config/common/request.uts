import { defaultConfig } from "../utssdk/defaultConfig.uts";
/**
 * 获取请求配置信息
 * @returns UTSJSONObject 配置信息
 */
export const osRequestConfig = defaultConfig.osRequest;
/**
 * 设置请求头的Token
 */
export const setOsRequestHeader = (header : UTSJSONObject) : void => {
	// #ifdef UNI-APP-X
	osRequestConfig.header = UTSJSONObject.assign(osRequestConfig.header as UTSJSONObject, header);
	// #endif
	// #ifndef UNI-APP-X
	osRequestConfig.header = Object.assign(osRequestConfig.header, header);
	// #endif
};
/**
 * 获取当前环境下的请求前缀
 * @returns string 请求前缀
 */
export const getRequestPrefix = () : string => {
	// #ifdef APP || WEB
	/**
	 * 正式环境：production
	 * 测试环境：development
	 */
	if (process.env.NODE_ENV == "production") {
		return defaultConfig.osRequest.production as string;
	} else {
		return defaultConfig.osRequest.development as string;
	};
	// #endif
	// #ifdef MP-WEIXIN || MP-ALIPAY || MP-QQ || MP-KUAISHOU
	/**
	 * 正式版：release
	 * 开发版：develop
	 * 体验版：trial
	 */
	const accountInfo = uni.getAccountInfoSync();
	if (accountInfo.miniProgram.envVersion == "release") {
		return defaultConfig.osRequest.production as string;
	} else {
		return defaultConfig.osRequest.development as string;
	};
	// #endif
	// 未适配平台则返回正式环境
	// #ifndef APP || WEB || MP-WEIXIN || MP-ALIPAY || MP-QQ || MP-KUAISHOU
	return defaultConfig.osRequest.production as string;
	// #endif
};

export type UcsInterceptorOptions = {
	invoke ?: (res : any) => void;
	success ?: (res : RequestSuccess<any>) => void;
	fail ?: (res : RequestFail) => void;
	complete ?: (res : any) => void;
};
/**
 * 请求拦截器
 */
export const osRequestInterception = (options : UcsInterceptorOptions) => {
	uni.$on("ucsRequestInterception", (e : UTSJSONObject) => {
		switch (e['type']) {
			case 'invoke':
				options.invoke?.(e['content'] as any);
				break;
			case 'success':
				options.success?.(e['content'] as RequestSuccess<any>);
				break;
			case 'fail':
				options.fail?.(e['content'] as RequestFail);
				break;
			case 'complete':
				options.complete?.(e['content'] as any);
				break;
			default:
				break;
		};
	});
};