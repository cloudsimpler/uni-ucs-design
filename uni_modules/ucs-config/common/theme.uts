import { defaultColors, darkGrey, lightGrey } from "../utssdk/defaultColors.uts";
import { defaultConfig } from "../utssdk/defaultConfig.uts";
import { generateObject, generateIndex } from "@/uni_modules/ucs-color";

/**
 * 切换深色主题模式
 * @param osTheme [light,dark] 模式主题
 */
export const setOsTheme = (osTheme : string) => {
	defaultConfig.osTheme = osTheme;
	const osColor = defaultConfig.osColor;
	for (let c in osColor) {
		const colorJson = generateObject(osColor[c] as string, c, osTheme);
		for (let i in colorJson) { defaultColors[i] = colorJson[i]; };
	};
	if (osTheme !== "dark") {
		for (let i in lightGrey) { defaultColors[i] = lightGrey[i]; };
	} else {
		for (let i in darkGrey) { defaultColors[i] = darkGrey[i]; };
	};
};

/**
 * 动态设置主题颜色
 * @param color hex颜色值
 */
export const setOsColorPrimary = (color : string) => {
	defaultConfig.osColor['primary'] = color;
	const colorJson = generateObject(color, "primary", defaultConfig.osTheme);
	for (let i in colorJson) { defaultColors[i] = colorJson[i]; };
};


/**
 * 根据浅色和深色模式下获取不同颜色
 * @param lightColor 浅色模式颜色
 * @param darkColor 深色模式颜色
 * @returns string 颜色值
 */
export const getLightDarkColor = (lightColor : string, darkColor : string) : string => {
	return defaultConfig.osTheme == "dark" ? darkColor : lightColor
};

/**
 * 根据浅色和深色模式下获取不同颜色
 * @param color hex颜色值
 * @param index 生成颜色值的等级
 * @returns string 颜色值
 */
export const getGenerateIndex = (color : string, index : number) : string => {
	return generateIndex(color, index, defaultConfig.osTheme)
};