import { defaultConfigType } from "../utssdk/interface.uts";

/**
 * 深度获取对象值
 * @param data 数据源
 * @param path 属性路径（支持标准对象/数组语法，如：'a.b[0].c'）
 * @returns 路径对应的值或空字符串（优先保持原始数据类型）
 */
export function getDeepProperty(data : any, path : string) : any {
	if (typeof data !== 'object') return "";
	let current : any = data;
	const segments = path.split('.');

	segments.forEach(segment => {
		if (segment.endsWith(']') && segment.includes('[')) {
			const bracketIndex = segment.indexOf('[')
			const key = segment.substring(0, bracketIndex)
			const indexStr = segment.substring(bracketIndex + 1, segment.length - 1)

			current = (current as UTSJSONObject)[key] as any;
			if (!Array.isArray(current)) return ""

			const index = parseInt(indexStr)
			if (isNaN(index) || index < 0 || index >= current.length) return ""

			current = current[index]
		} else {
			if (typeof current !== 'object' || Array.isArray(current)) return ""
			current = (current as UTSJSONObject)[segment] as any
		}
	});

	return current;
};

// 声明函数
let deepMergeObject : ((first : UTSJSONObject, second : UTSJSONObject) => UTSJSONObject) | null = null;
/**
 * object深度合并
 * @param first 原始object数据
 * @param second 需要被合并的object数据
 * @returns object
 */
deepMergeObject = (first : UTSJSONObject, second : UTSJSONObject) : UTSJSONObject => {
	for (let f in second) {
		if (first.hasOwnProperty(f)) {
			if (typeof first[f] === 'object' && !Array.isArray(first[f]) && typeof second[f] === 'object' && !Array.isArray(second[f])) {
				first[f] = deepMergeObject?.(first[f] as UTSJSONObject, second[f] as UTSJSONObject);
			} else {
				if (typeof first[f] === typeof second[f] && second[f] != null) {
					first[f] = second[f];
				};
			}
		} else {
			first[f] = second[f];
		};
	};
	return first as UTSJSONObject;
};
/**
 * 数据合并
 * @param rawData 原始object数据
 * @param combinedData 需要被合并的object数据
 * @returns object
 */
export const processMerging = (rawData : defaultConfigType, combinedData : UTSJSONObject) => {
	for (let f in rawData) {
		if (combinedData.hasOwnProperty(f)) {
			if (typeof rawData[f] === 'object' && !Array.isArray(rawData[f]) && typeof combinedData[f] === 'object' && !Array.isArray(combinedData[f])) {
				rawData[f] = deepMergeObject?.(rawData[f] as UTSJSONObject, combinedData[f] as UTSJSONObject);
			} else {
				if (typeof rawData[f] === typeof combinedData[f] && combinedData[f] != null) {
					rawData[f] = combinedData[f];
				};
			}
		};
	};
};