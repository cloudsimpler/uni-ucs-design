type defaultConfigType = {
	osTheme : string;
	osLanguage : string;
	osColor : UTSJSONObject;
	osUcsLanguage : UTSJSONObject;
	osI18nLanguage : UTSJSONObject;
};

/**
 * 声明函数
 */
let deepMergeObject : ((first : UTSJSONObject, second : UTSJSONObject) => UTSJSONObject) | null = null;
/**
 * object深度合并
 * @param first 原始object数据
 * @param second 需要被合并的object数据
 * @returns object
 */
deepMergeObject = (first : UTSJSONObject, second : UTSJSONObject) : UTSJSONObject => {
	for (let f in second) {
		if (first.hasOwnProperty(f)) {
			if (typeof first[f] === 'object' && !Array.isArray(first[f]) && typeof second[f] === 'object' && !Array.isArray(second[f])) {
				first[f] = deepMergeObject?.(first[f] as UTSJSONObject, second[f] as UTSJSONObject);
			} else {
				if (typeof first[f] === typeof second[f] && second[f] != null) {
					first[f] = second[f];
				};
			}
		} else {
			first[f] = second[f];
		};
	};
	return first as UTSJSONObject;
};
/**
 * 数据合并
 * @param rawData 原始object数据
 * @param combinedData 需要被合并的object数据
 * @returns object
 */
const processMerging = (rawData : defaultConfigType, combinedData : UTSJSONObject) => {
	for (let f in rawData) {
		if (combinedData.hasOwnProperty(f)) {
			if (typeof rawData[f] === 'object' && !Array.isArray(rawData[f]) && typeof combinedData[f] === 'object' && !Array.isArray(combinedData[f])) {
				rawData[f] = deepMergeObject?.(rawData[f] as UTSJSONObject, combinedData[f] as UTSJSONObject);
			} else {
				if (typeof rawData[f] === typeof combinedData[f] && combinedData[f] != null) {
					rawData[f] = combinedData[f];
				};
			}
		};
	};
};

export {
	defaultConfigType,
	processMerging
}