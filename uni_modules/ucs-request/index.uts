import { getRequestPrefix, osRequestConfig } from "../ucs-config";
import { UcsRequestOptions } from "./utssdk/interface";
// 合并去重
export const getArrayMerge = (p1 : UTSJSONObject[], p2 : UTSJSONObject[]) : UTSJSONObject[] => {
	const mergedArray = p1.concat(p2);
	const stringifiedArray = mergedArray.map(obj => JSON.stringify(obj));
	const uniqueStringSet = new Set(stringifiedArray);
	const uniqueArray = Array.from(uniqueStringSet).map(str => JSON.parse(str as string) as any);
	return uniqueArray as UTSJSONObject[];
};
// 合并去重刷新
export const getArrayMergeRefresh = (p1 : UTSJSONObject[], p2 : UTSJSONObject[], refresh : boolean) : UTSJSONObject[] => {
	if (refresh) {
		return p2;
	} else {
		return getArrayMerge(p1, p2);
	};
};

const getJsonMerge = (p1 : UTSJSONObject, p2 : UTSJSONObject) : UTSJSONObject => {
	// #ifdef UNI-APP-X
	return UTSJSONObject.assign(p1, p2);
	// #endif
	// #ifndef UNI-APP-X
	return Object.assign(p1, p2);
	// #endif
};

const optionsRetrieval = (options : UcsRequestOptions) => {
	let params = {};
	for (let i in options) {
		if (options[i] !== null && !['success', 'fail', 'complete'].includes(i)) {
			params[i] = options[i]
		};
	};

	if (params.hasOwnProperty('header')) {
		params.header = getJsonMerge(osRequestConfig.header as UTSJSONObject, params.header as UTSJSONObject)
	};

	const url = params['url'] as string | null;
	if (url != null && typeof url == 'string' && url.startsWith('http')) {
		// 完整地址，直接复用
	} else {
		// 拼接地址
		params.url = `${getRequestPrefix()}/${params.url}`;
	}

	return getJsonMerge(osRequestConfig, params);
};

const requestPreposition = (method : string, options : UcsRequestOptions) => {
	uni.$emit("ucsRequestInterception", { type: "invoke", content: options });
	const params = JSON.parse(JSON.stringify(optionsRetrieval(options))) as UTSJSONObject;
	uni.request({
		method: method,
		url: params.url as string,
		data: params.data as UTSJSONObject,
		header: params.header as UTSJSONObject,
		timeout: params.timeout as number,
		withCredentials: params.withCredentials as boolean,
		firstIpv4: params.firstIpv4 as boolean,
		enableChunked: params.enableChunked as boolean,
		success: (res) => {
			options.success?.(res);
			options.complete?.(res);
			uni.$emit("ucsRequestInterception", { type: "success", content: res });
		},
		fail: (err) => {
			options.fail?.(err);
			options.complete?.(err);
			uni.$emit("ucsRequestInterception", { type: "fail", content: err });
		},
		complete: (log) => {
			uni.$emit("ucsRequestInterception", { type: "complete", content: log });
			if (params.log as boolean) {
				// #ifdef UNI-APP-X
				console.log(UTSJSONObject.assign(JSON.parse(JSON.stringify(log)) as IUTSObject, { "requestDetails": params }))
				// #endif
				// #ifndef UNI-APP-X
				console.log(Object.assign(log, { "requestDetails": params }))
				// #endif
			};
		}
	})
}

export class http {
	// 合并去重刷新
	static getArrayMergeRefresh(p1 : UTSJSONObject[], p2 : UTSJSONObject[], refresh : boolean) : UTSJSONObject[] {
		if (refresh) {
			return p2;
		} else {
			return getArrayMerge(p1, p2);
		};
	};
	// 合并去重
	static getArrayMerge(p1 : UTSJSONObject[], p2 : UTSJSONObject[]) : UTSJSONObject[] {
		return getArrayMerge(p1, p2);
	};

	static get(options : UcsRequestOptions) {
		requestPreposition("GET", options)
	};

	static post(options : UcsRequestOptions) {
		requestPreposition("POST", options)
	};

	static put(options : UcsRequestOptions) {
		requestPreposition("PUT", options)
	};

	static patch(options : UcsRequestOptions) {
		requestPreposition("PATCH", options)
	};

	static delete(options : UcsRequestOptions) {
		requestPreposition("DELETE", options)
	};

	static head(options : UcsRequestOptions) {
		requestPreposition("HEAD", options)
	};

	static options(options : UcsRequestOptions) {
		requestPreposition("OPTIONS", options)
	};

}