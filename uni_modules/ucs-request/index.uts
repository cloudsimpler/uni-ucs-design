import { getRequestPrefix, osRequestConfig } from "../ucs-config";
import { UcsRequestOptions } from "./utssdk/interface";

export const concatRepeat = (a : UTSJSONObject[], b : UTSJSONObject[]) => {
	const mergedArray = a.concat(b);
	const stringifiedArray = mergedArray.map(obj => JSON.stringify(obj));
	const uniqueStringSet = new Set(stringifiedArray);
	const uniqueArray = Array.from(uniqueStringSet).map(str => JSON.parse(str as string) as any);
	return uniqueArray as UTSJSONObject[];
}

const optionsRetrieval = (options : UcsRequestOptions) => {
	let params = {};
	for (let i in options) {
		if (options[i] !== null && !['success', 'fail', 'complete'].includes(i)) {
			params[i] = options[i]
		};
	};

	if (params.hasOwnProperty('header')) {
		params.header = UTSJSONObject.assign(osRequestConfig.header as UTSJSONObject, params.header as UTSJSONObject)
	};

	if (params.getString('url')?.startsWith('http') as Boolean) {
		// 完整地址，直接复用
	} else {
		// 拼接地址
		params.url = `${getRequestPrefix()}/${params.url}`;
	};

	return UTSJSONObject.assign(osRequestConfig, params);
};

const requestPreposition = (method : string, options : UcsRequestOptions) => {
	uni.$emit("ucsRequestInterception", {type: "invoke",content: options});
	const params = optionsRetrieval(options);
	uni.request({
		method: method,
		url: params.url as string,
		data: params.data as UTSJSONObject,
		header: params.header as UTSJSONObject,
		timeout: params.timeout as number,
		withCredentials: params.withCredentials as boolean,
		firstIpv4: params.firstIpv4 as boolean,
		enableChunked: params.enableChunked as boolean,
		success: (res) => {
			options.success?.(res);
			options.complete?.(res);
			uni.$emit("ucsRequestInterception", {type: "success",content: res});
		},
		fail: (err) => {
			options.fail?.(err);
			options.complete?.(err);
			uni.$emit("ucsRequestInterception", {type: "fail",content: err});
		},
		complete: (log) => {
			uni.$emit("ucsRequestInterception", {type: "complete",content: log});
			if (params.log as boolean) {
				console.log(UTSJSONObject.assign(log as IUTSObject, { "requestDetails": params }));
			};
		}
	})
}

export class http {
	// 合并去重
	static concatRepeat(a : UTSJSONObject[], b : UTSJSONObject[]) {
		const mergedArray = a.concat(b);
		const stringifiedArray = mergedArray.map(obj => JSON.stringify(obj));
		const uniqueStringSet = new Set(stringifiedArray);
		const uniqueArray = Array.from(uniqueStringSet).map(str => JSON.parse(str as string) as any);
		return uniqueArray as UTSJSONObject[];
	};

	static get(options : UcsRequestOptions) {
		requestPreposition("GET", options)
	};

	static post(options : UcsRequestOptions) {
		requestPreposition("POST", options)
	};

	static put(options : UcsRequestOptions) {
		requestPreposition("PUT", options)
	};

	static patch(options : UcsRequestOptions) {
		requestPreposition("PATCH", options)
	};

	static delete(options : UcsRequestOptions) {
		requestPreposition("DELETE", options)
	};

	static head(options : UcsRequestOptions) {
		requestPreposition("HEAD", options)
	};

	static options(options : UcsRequestOptions) {
		requestPreposition("OPTIONS", options)
	};

}